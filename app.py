# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16hLK4A0zfT3k5XDfk9aPqspXjzzj-L7f
"""

import streamlit as st
import pandas as pd
import joblib

# -------------------------------
# Load model and scaler
# -------------------------------
@st.cache_resource
def load_model_and_scaler():
    model = joblib.load("trained_model.pkl")
    scaler = joblib.load("scaler.pkl")
    return model, scaler

best_model, scaler = load_model_and_scaler()

# -------------------------------
# Feature list
# -------------------------------
all_features = [
    "account_length", "voice_mail_plan", "voice_mail_messages",
    "day_mins", "day_calls", "day_charge",
    "evening_mins", "evening_calls", "evening_charge",
    "night_mins", "night_calls", "night_charge",
    "international_mins", "international_calls", "international_charge",
    "customer_service_calls", "international_plan", "total_charge"
]

selected_features = [
    "voice_mail_messages",
    "customer_service_calls",
    "international_plan",
    "international_charge",
    "international_calls",
    "day_mins",
    "evening_mins",
    "night_mins",
    "total_charge"
]

# -------------------------------
# Streamlit UI
# -------------------------------
st.title("üìû Telecom Customer Churn Prediction")

st.write("Enter customer details below:")

# Collect inputs individually
user_inputs = {}
for feature in all_features:
    if feature in ["voice_mail_plan", "international_plan"]:
        user_inputs[feature] = st.selectbox(
            feature, ["no", "yes"]
        )
    else:
        user_inputs[feature] = st.number_input(feature, value=0.0)

# Convert categorical to numeric
user_inputs["voice_mail_plan"] = 1 if user_inputs["voice_mail_plan"] == "yes" else 0
user_inputs["international_plan"] = 1 if user_inputs["international_plan"] == "yes" else 0

# Create dataframe
user_df = pd.DataFrame([user_inputs])

# -------------------------------
# Prediction
# -------------------------------
if st.button("Predict Churn"):
    try:
        X_selected = user_df[selected_features]
        X_scaled = scaler.transform(X_selected)

        probs = best_model.predict_proba(X_scaled)[:, 1]
        preds = (probs >= 0.5).astype(int)

        st.subheader("‚úÖ Prediction Result")
        st.write("Prediction:", "Churn" if preds[0] == 1 else "Not Churn")
        st.write("Churn Probability:", round(probs[0], 2))

    except Exception as e:
        st.error(f"‚ö†Ô∏è Error during prediction: {e}")